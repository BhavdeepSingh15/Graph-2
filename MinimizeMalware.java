class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n= graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors,-1);

        int cl = 0 ;
        for(int i = 0;i<n;i++){
            if(colors[i]==-1){
                dfs(graph, colors,i,cl);
                cl++;
            }
        }


        int[] groups = new int[cl];
        for(int node: colors){
            groups[node]++;
        }

        int[] infctd = new int[cl];
        for(int node: initial){
            int gr = colors[node];
            infctd[gr]++;
        }

        int result = Integer.MAX_VALUE;
        for(int node: initial){
            int gr= colors[node];
            if(infctd[gr]==1){
                if(result == Integer.MAX_VALUE){
                    result=node;
                }else if(groups[colors[node]]> groups[colors[result]]){
                    result=node;
                }else if(groups[colors[node]] == groups[colors[result]]){
                    result=Math.min(result, node);
                }
            }
        }

        if(result == Integer.MAX_VALUE){
            for(int node: initial){
                result = Math.min(result,node);
            }
        }

        return result;
    }


    private void dfs(int[][] graph, int[] colors, int i, int cl){

        if(colors[i]!= -1) return;

        colors[i]=cl;
        for(int j=0;j<graph.length;j++){
            if(i == j) continue;
            if(graph[i][j]==1){
                dfs(graph, colors, j, cl);
            }
        }
    }
}